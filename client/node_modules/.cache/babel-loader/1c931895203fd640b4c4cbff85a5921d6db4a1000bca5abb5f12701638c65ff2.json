{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst axios = require('axios');\nconst app = express();\napp.use(express.json());\nconst formDataSchema = new mongoose.Schema({\n  responses: {\n    type: Map,\n    of: [mongoose.Schema.Types.Mixed]\n  }\n});\nconst FormDataModel = mongoose.model('mediaFormData', formDataSchema);\nconst getData = async (req, res) => {\n  try {\n    const {\n      data\n    } = req.body; // Extract data from request body\n    console.log(\"GetData API is triggered with data:\", data);\n\n    // Process data as needed\n    // For now, let's just send back the received data\n    res.status(200).json({\n      success: true,\n      data: data\n    });\n  } catch (error) {\n    console.error(\"Error in getData:\", error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal Server Error'\n    });\n  }\n};\nconst submitForm = async (req, res) => {\n  try {\n    console.log('Request Body:', req.body);\n    const {\n      qn1,\n      qn2,\n      qn3,\n      qn4,\n      qn5,\n      qn6,\n      qn7,\n      qn8,\n      qn9,\n      qn10\n    } = req.body;\n    const questionsAndAnswers = {\n      'What aspect of media and entertainment are you interested in?': qn1,\n      'What tasks or activities do you want to accomplish using cloud services?': qn2,\n      'Are you looking to enhance viewer engagement through interactive features like polls and Q&A?': qn3,\n      'Would you like to implement a media chatbot for viewer inquiries and support?': qn4,\n      'Do you require a cloud solution for live streaming and event broadcasting to a global audience?': qn5,\n      'Do you need cloud-based tools for video editing and post-production tasks?': qn6,\n      'Do you require a cloud solution for content localization and multilingual subtitles for global audiences?': qn7,\n      'Are you looking for a system to manage digital rights and content licensing for media distribution?': qn8,\n      'Are there any specific geographic regions / requirements for your users?': qn9,\n      'Are you interested in managing and tracking viewer engagement and viewer feedback effectively?': qn10\n    };\n    console.log('Questions and Answers:', questionsAndAnswers);\n    const jsonQuestionsAndAnswers = JSON.stringify(questionsAndAnswers);\n    console.log('JSON Questions and Answers:', jsonQuestionsAndAnswers);\n    const mediaformData = new FormDataModel({\n      responses: questionsAndAnswers\n    });\n    await mediaformData.save();\n    const getServiceResponse = await axios.post('http://localhost:9000/getService', {\n      data: questionsAndAnswers\n    });\n    console.log('Response from getService:', getServiceResponse.data);\n\n    // Send data to getData endpoint\n    const getDataResponse = await axios.post('http://localhost:8000/getData', {\n      data: getServiceResponse.data\n    });\n    console.log('Response from getData:', getDataResponse.data);\n\n    //res.status(201).json({ success: true, message: 'Form data saved and processed successfully', getDataResponse: getDataResponse.data });\n\n    res.status(201).json({\n      success: true,\n      message: 'Media Form data saved successfully'\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      success: false,\n      message: 'Internal Server Error'\n    });\n  }\n};\nmodule.exports = {\n  mediaController: mongoose.model('mediaController', formDataSchema),\n  submitForm,\n  getData\n};","map":{"version":3,"names":["express","require","mongoose","axios","app","use","json","formDataSchema","Schema","responses","type","Map","of","Types","Mixed","FormDataModel","model","getData","req","res","data","body","console","log","status","success","error","message","submitForm","qn1","qn2","qn3","qn4","qn5","qn6","qn7","qn8","qn9","qn10","questionsAndAnswers","jsonQuestionsAndAnswers","JSON","stringify","mediaformData","save","getServiceResponse","post","getDataResponse","module","exports","mediaController"],"sources":["C:/Users/spd85/Downloads/cloud_cost_optimization-system/cloud_cost_optimization-system/client/src/Components/Result.jsx"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst axios = require('axios'); \n\nconst app = express();\napp.use(express.json());\n\nconst formDataSchema = new mongoose.Schema({\n  responses: {\n    type: Map,\n    of: [mongoose.Schema.Types.Mixed],\n  },\n});\n\nconst FormDataModel = mongoose.model('mediaFormData', formDataSchema);\n\nconst getData = async (req, res) => {\n  try {\n    const { data } = req.body; // Extract data from request body\n    console.log(\"GetData API is triggered with data:\", data);\n\n    // Process data as needed\n    // For now, let's just send back the received data\n    res.status(200).json({ success: true, data: data });\n  } catch (error) {\n    console.error(\"Error in getData:\", error);\n    res.status(500).json({ success: false, message: 'Internal Server Error' });\n  }\n};\n\nconst submitForm = async (req, res) => {\n  try {\n    console.log('Request Body:', req.body);\n    const { qn1, qn2, qn3, qn4, qn5, qn6, qn7, qn8, qn9, qn10 } = req.body;\n\n    const questionsAndAnswers = {\n      'What aspect of media and entertainment are you interested in?': qn1,\n      'What tasks or activities do you want to accomplish using cloud services?': qn2,\n      'Are you looking to enhance viewer engagement through interactive features like polls and Q&A?': qn3,\n      'Would you like to implement a media chatbot for viewer inquiries and support?': qn4,\n      'Do you require a cloud solution for live streaming and event broadcasting to a global audience?': qn5,\n      'Do you need cloud-based tools for video editing and post-production tasks?': qn6,\n      'Do you require a cloud solution for content localization and multilingual subtitles for global audiences?': qn7,\n      'Are you looking for a system to manage digital rights and content licensing for media distribution?': qn8,\n      'Are there any specific geographic regions / requirements for your users?': qn9,\n      'Are you interested in managing and tracking viewer engagement and viewer feedback effectively?': qn10\n    };\n\n    console.log('Questions and Answers:', questionsAndAnswers);\n    const jsonQuestionsAndAnswers = JSON.stringify(questionsAndAnswers);\n    console.log('JSON Questions and Answers:', jsonQuestionsAndAnswers);\n\n    const mediaformData = new FormDataModel({\n      responses: questionsAndAnswers,\n    });\n    await mediaformData.save();\n\n    const getServiceResponse = await axios.post('http://localhost:9000/getService', { data: questionsAndAnswers });\n    console.log('Response from getService:', getServiceResponse.data);\n\n    // Send data to getData endpoint\n    const getDataResponse = await axios.post('http://localhost:8000/getData', { data: getServiceResponse.data });\n    console.log('Response from getData:', getDataResponse.data);\n\n    //res.status(201).json({ success: true, message: 'Form data saved and processed successfully', getDataResponse: getDataResponse.data });\n\n    res.status(201).json({ success: true, message: 'Media Form data saved successfully' });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ success: false, message: 'Internal Server Error' });\n  }\n};\n\nmodule.exports = {\n  mediaController: mongoose.model('mediaController', formDataSchema),\n  submitForm, \n  getData,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}